jobs:
  stage_0_job_0:
    name: tf2-msgs kdl-parser xacro dynamic-reconfigure forward-command-controller
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs: []
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-tf2-msgs ros-noetic-kdl-parser ros-noetic-xacro ros-noetic-dynamic-reconfigure
        ros-noetic-forward-command-controller
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-tf2-msgs ros-noetic-kdl-parser ros-noetic-xacro
          ros-noetic-dynamic-reconfigure ros-noetic-forward-command-controller
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_0_job_1:
    name: joint-state-controller imu-sensor-controller force-torque-sensor-controller
      combined-robot-hw hector-nav-msgs
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs: []
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-joint-state-controller ros-noetic-imu-sensor-controller
        ros-noetic-force-torque-sensor-controller ros-noetic-combined-robot-hw ros-noetic-hector-nav-msgs
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-joint-state-controller ros-noetic-imu-sensor-controller
          ros-noetic-force-torque-sensor-controller ros-noetic-combined-robot-hw ros-noetic-hector-nav-msgs
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_0_job_2:
    name: hector-map-tools gps-common four-wheel-steering-msgs radar-msgs cv-camera
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs: []
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-hector-map-tools ros-noetic-gps-common ros-noetic-four-wheel-steering-msgs
        ros-noetic-radar-msgs ros-noetic-cv-camera
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-hector-map-tools ros-noetic-gps-common ros-noetic-four-wheel-steering-msgs
          ros-noetic-radar-msgs ros-noetic-cv-camera
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_1_job_3:
    name: tf2 control-toolbox diff-drive-controller position-controllers hector-trajectory-server
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_0_job_0
    - stage_0_job_1
    - stage_0_job_2
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-tf2 ros-noetic-control-toolbox ros-noetic-diff-drive-controller
        ros-noetic-position-controllers ros-noetic-hector-trajectory-server
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-tf2 ros-noetic-control-toolbox ros-noetic-diff-drive-controller
          ros-noetic-position-controllers ros-noetic-hector-trajectory-server
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_1_job_4:
    name: ros-control urdf-geometry-parser
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_0_job_0
    - stage_0_job_1
    - stage_0_job_2
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-ros-control ros-noetic-urdf-geometry-parser
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-ros-control ros-noetic-urdf-geometry-parser
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_2_job_5:
    name: tf2-py tf2-eigen joint-trajectory-controller velocity-controllers gripper-action-controller
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_1_job_3
    - stage_1_job_4
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-tf2-py ros-noetic-tf2-eigen ros-noetic-joint-trajectory-controller
        ros-noetic-velocity-controllers ros-noetic-gripper-action-controller
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-tf2-py ros-noetic-tf2-eigen ros-noetic-joint-trajectory-controller
          ros-noetic-velocity-controllers ros-noetic-gripper-action-controller
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_2_job_6:
    name: effort-controllers ackermann-steering-controller tf2-bullet
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_1_job_3
    - stage_1_job_4
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-effort-controllers ros-noetic-ackermann-steering-controller
        ros-noetic-tf2-bullet
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-effort-controllers ros-noetic-ackermann-steering-controller
          ros-noetic-tf2-bullet
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_3_job_7:
    name: tf2-ros ros-controllers
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_2_job_5
    - stage_2_job_6
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-tf2-ros ros-noetic-ros-controllers
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-tf2-ros ros-noetic-ros-controllers
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_4_job_8:
    name: tf2-geometry-msgs tf2-kdl tf2-sensor-msgs tf2-tools
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_3_job_7
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-tf2-geometry-msgs ros-noetic-tf2-kdl ros-noetic-tf2-sensor-msgs
        ros-noetic-tf2-tools
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-tf2-geometry-msgs ros-noetic-tf2-kdl ros-noetic-tf2-sensor-msgs
          ros-noetic-tf2-tools
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
  stage_5_job_9:
    name: geometry2
    runs-on:
    - self-hosted
    - linux
    - ARM64
    strategy:
      fail-fast: false
    needs:
    - stage_4_job_8
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build ros-noetic-geometry2
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        CURRENT_RECIPES: ros-noetic-geometry2
        DOCKER_IMAGE: condaforge/linux-anvil-aarch64
      run: |
        export CI=azure
        export GIT_BRANCH=$BUILD_SOURCEBRANCHNAME
        export FEEDSTOCK_NAME=$(basename ${BUILD_REPOSITORY_NAME})
        .scripts/run_docker_build.sh
on:
  push:
    branches:
    - buildbranch_linux_aarch64
